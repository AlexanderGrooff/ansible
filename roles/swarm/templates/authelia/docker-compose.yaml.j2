version: "3.9"
secrets:
  authelia_jwt_secret:
    external: true
  authelia_session_secret:
    external: true
  # authelia_storage_postgres_password:
  #   external: true
  authelia_storage_encryption_key:
    external: true
services:
  traefik:
    image: traefik:v2.10
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8080
        published: 8080
        protocol: tcp
    deploy:
      mode: global  # Every node 1x
      labels:
        # Enable Traefik for this service, to make it available in the public network
        - traefik.enable=true
        # Use the traefik-public network (declared below)
        - traefik.docker.network=traefik-public
        # Use the custom label "traefik.constraint-label=traefik-public"
        # This public Traefik will only use services with this label
        # That way you can add other internal Traefik instances per stack if needed
        - traefik.constraint-label=traefik-public
        # Define the port inside of the Docker service to use
        - traefik.http.services.traefik-public.loadbalancer.server.port=8080

        # Expose dashboard via Authelia
        - 'traefik.http.routers.api.rule=Host(`traefik.{{apex_domain}}`)'
        - 'traefik.http.routers.api.entryPoints=https'
        - 'traefik.http.routers.api.tls=true'
        - 'traefik.http.routers.api.service=api@internal'
        - 'traefik.http.routers.api.middlewares=authelia@docker'
    volumes:
      # Add Docker as a mounted volume, so that Traefik can read the labels of other services
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /data/swarm/traefik/config:/etc/traefik
      - /data/swarm/traefik/traefik.log:/traefik.log
      - /data/swarm/traefik/access.log:/access.log
      - /data/swarm/traefik/acme.json:/acme.json
    environment:
      - CLOUDFLARE_EMAIL={{cloudflare.email}}
      - CLOUDFLARE_API_KEY={{cloudflare.api_token}}
    networks:
      # Use the public network created to be shared between Traefik and
      # any other service that needs to be publicly available with HTTPS
      traefik-public: {}
  authelia:
    image: docker.io/authelia/authelia:latest
    # restart: unless-stopped
    secrets:
      - authelia_jwt_secret
      - authelia_session_secret
      # - authelia_storage_postgres_password
      - authelia_storage_encryption_key
    environment:
      AUTHELIA_JWT_SECRET_FILE: /run/secrets/authelia_jwt_secret
      AUTHELIA_SESSION_SECRET_FILE: /run/secrets/authelia_session_secret
      # AUTHELIA_STORAGE_POSTGRES_PASSWORD_FILE: /run/secrets/authelia_storage_postgres_password
      AUTHELIA_STORAGE_ENCRYPTION_KEY_FILE: /run/secrets/authelia_storage_encryption_key
    deploy:
      labels:
        - 'traefik.enable=true'
        - 'traefik.docker.network=traefik-public'
        - 'traefik.constraint-label=traefik-public'
        - 'traefik.http.routers.authelia.tls=true'
        - 'traefik.http.routers.authelia.rule=Host(`auth.{{ apex_domain }}`)'
        - 'traefik.http.routers.authelia.entrypoints=https'
        - 'traefik.http.services.authelia.loadbalancer.server.port=9091'
        - 'traefik.http.middlewares.authelia.forwardAuth.address=http://authelia:9091/api/verify?rd=https%3A%2F%2Fauth.{{ apex_domain }}%2F'
        - 'traefik.http.middlewares.authelia.forwardAuth.trustForwardHeader=true'
        - 'traefik.http.middlewares.authelia.forwardAuth.authResponseHeaders=Remote-User,Remote-Groups,Remote-Name,Remote-Email'
    networks:
      traefik-public: {}
    volumes:
    - /data/swarm/authelia/config:/config

volumes:
  # Create a volume to store the certificates, there is a constraint to make sure
  # Traefik is always deployed to the same Docker node with the same volume containing
  # the HTTPS certificates
  traefik-public-certificates:

networks:
  traefik-public:
    # Communicate between Traefik and any other service that is in the public network
    external: true
